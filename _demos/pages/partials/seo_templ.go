// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package partials

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/indaco/teseo/schemaorg"

// Example contact points
var contactPoints = []schemaorg.ContactPoint{
	{
		Type:              "ContactPoint",
		Telephone:         "+1-800-555-1212",
		ContactType:       "Customer Service",
		AreaServed:        "US",
		AvailableLanguage: "English",
	},
}

// Example sameAs URLs
var sameAs = []string{
	"https://www.facebook.com/example",
	"https://www.twitter.com/example",
	"https://www.linkedin.com/company/example",
}

// Create an organization
var org = schemaorg.NewOrganization(
	"Example Inc.",
	"https://www.example.com",
	"https://www.example.com/logo.png",
	contactPoints,
	sameAs,
)

var website = schemaorg.WebSite{
	URL:           "https://www.example.com",
	Name:          "Example Website",
	AlternateName: "Example Site",
	Description:   "An example website for demonstration purposes.",
	PotentialAction: &schemaorg.Action{
		Type: "SearchAction",
		Target: &schemaorg.Target{
			Type:        "EntryPoint",
			URLTemplate: "https://www.example.com/search?q={search_term_string}",
		},
		QueryInput: "required name=search_term_string",
	},
}

// Create item list elements using the constructor
var itemListElements = []schemaorg.ItemListElement{
	schemaorg.NewItemListElement("Home", "https://www.example.com/", 1),
	schemaorg.NewItemListElement("About Us", "https://www.example.com/about", 2),
}

// Create an item list using the constructor
var itemList = schemaorg.NewItemList(itemListElements)

var sne = schemaorg.SiteNavigationElement{
	Name:       "Main Navigation",
	URL:        "https://www.example.com/secondary",
	Position:   1,
	Identifier: "main-nav",
	ItemList:   &itemList,
}

func SEO() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = org.ToJsonLd().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = website.ToJsonLd().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = sne.ToJsonLd().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
